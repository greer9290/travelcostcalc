Implementing asyncio for the hotel requests portion of your program would indeed help speed up the process, especially when querying multiple hotels. Here's how you could modify your code to use asyncio for the hotel requests:


import asyncio
import aiohttp

from amadeus import Client, ResponseError
from amadeus.client.decorator import Decorator

amadeus = Client(
    client_id='OrUx7h1FI2oq4sqL8AWX2nVNJIGglcGw',
    client_secret='1ttndaQhCwXxyDSS',
    hostname='test'
)

# Create an async decorator
async_amadeus = Decorator(amadeus)

Create an async function for hotel requests:

async def fetch_hotel_data(session, hotel_id, depart_date, return_date):
    try:
        response = await async_amadeus.shopping.hotel_offers_search.get(
            hotelIds=hotel_id, 
            adults=1, 
            checkInDate=depart_date, 
            checkOutDate=return_date,
            boardType='ROOM_ONLY',
            roomQuantity=1,
            currency='USD', 
            includeClosed=False,
            bestRateOnly=True
        )
        
        if response.data:
            price = float(response.data[0]['offers'][0]['price']['total'])
            return price, response.data
        return None, None
    except ResponseError as error:
        print(f"Error fetching data for hotel {hotel_id}: {error}")
        return None, None

Modify the hotel search part of your get_travel_costs function:

    async def async_hotel_search(hotel_ids, depart_date, return_date):
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_hotel_data(session, hotel_id, depart_date, return_date) for hotel_id in hotel_ids]
        results = await asyncio.gather(*tasks)
    
    hotel_prices = [result[0] for result in results if result[0] is not None]
    hotel_data = [result[1] for result in results if result[1] is not None]
    
    return hotel_prices, hotel_data

def get_travel_costs(origin, destination, numdays_str, margin_str, avg_hotel_ntly_str, car_rate_str, meal_cost_str):
    # ... (existing code)

    hotel_list = amadeus.reference_data.locations.hotels.by_city.get(cityCode=destination)
    all_hotel_ids = [location['hotelId'] for location in hotel_list.data]
    hotel_ids = random.sample(all_hotel_ids, min(10, len(all_hotel_ids)))

    # Run the async hotel search
    hotel_prices, hotel_data = asyncio.run(async_hotel_search(hotel_ids, depart_date, return_date))

    average_hotel_price = sum(hotel_prices) / len(hotel_prices) if hotel_prices else 0

    # ... (rest of the existing code)

Update your calculate_and_save method in the TravelCostApp class to run the asynchronous code:

pythonCopydef calculate_and_save(self):
    # ... (existing code)
    try:
        self.show_loading_window()
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        results = loop.run_until_complete(get_travel_costs(origin, destination, numdays_str, margin_str, avg_hotel_ntly_str, car_rate_str, meal_cost_str))
        loop.close()
        depart_date, return_date, origin, destination, average_flight_price, hotel_cost, car_cost, meal_cost, numdays, total_cost, sales_price = results
        self.hide_loading_window()
        # ... (rest of the existing code)
    except Exception as e:
        self.hide_loading_window()
        messagebox.showerror("Error", f"An error occurred: {str(e)}")
These changes will implement asyncio for the hotel requests portion of your program. This should significantly speed up the process of fetching hotel data, as all requests will be made concurrently rather than sequentially.
A few things to note:

You'll need to install the aiohttp library if you haven't already: pip install aiohttp
Make sure to handle any potential errors that may occur during the async operations.
The Amadeus API might have rate limits, so be cautious about making too many concurrent requests.
You may need to adjust the error handling and logging to fit with the asynchronous nature of the code.
Ensure that the Amadeus Python SDK you're using supports async operations. If it doesn't, you might need to implement the API calls manually using aiohttp.

This implementation should provide a significant speed boost for the hotel data fetching portion of your program, especially when dealing with multiple hotel queries.